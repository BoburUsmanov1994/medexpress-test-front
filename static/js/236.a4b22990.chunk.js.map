{"version":3,"file":"static/js/236.a4b22990.chunk.js","mappings":"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","sources":["components/select/index.jsx","constants/index.js","assets/icons/prev.svg","assets/icons/next.svg","components/no-data/index.jsx","containers/grid-view/index.jsx","modules/settings/containers/TranslationsContainer.jsx","modules/settings/pages/TranslationsPage.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport RSelect, {components} from 'react-select';\r\nimport clsx from \"clsx\";\r\nimport arrowIcon from \"../../assets/icons/select-arrow.svg\"\r\n\r\nconst DropdownIndicator = props => {\r\n    return (\r\n        components.DropdownIndicator && (\r\n            <components.DropdownIndicator {...props}>\r\n                <img src={arrowIcon} alt={'arrow'}/>\r\n            </components.DropdownIndicator>\r\n        )\r\n    );\r\n};\r\nconst customStyles = (sm = false) => ({\r\n    control: (base, state, error) => ({\r\n        ...base,\r\n        background: \"#fff\",\r\n        borderColor: \"rgba(0, 0, 0, 0.1)\",\r\n        borderRadius: '8px',\r\n        outline: \"none\",\r\n        color: \"#222\",\r\n        display: \"flex\",\r\n        overflow: 'hidden',\r\n        padding: '2px 8px',\r\n        width: sm ?'100px':'200px',\r\n        height: '40px',\r\n        fontSize: '16px',\r\n        fontWeight: '600',\r\n        // \"&:hover\": {\r\n        //     borderColor: '#006D85',\r\n        //     outline: \"none\",\r\n        // },\r\n        // \"&:focus\": {\r\n        //     borderColor: '#006D85',\r\n        //     outline: \"none\",\r\n        // }\r\n    }),\r\n    indicatorSeparator: (base, state) => ({\r\n        ...base,\r\n        display: 'none'\r\n    })\r\n});\r\nconst Select = ({\r\n                    name = '',\r\n                    value = null,\r\n                    sm = false,\r\n                    label = '',\r\n                    options = [],\r\n                    setValue = () => {\r\n                    },\r\n                    isClearable=true,\r\n                    isLoading=false\r\n                }) => {\r\n\r\n    return (\r\n        <div className={clsx('flex items-center z-50 relative')}>\r\n            {label && <label className={clsx('mr-2 text-secondary-300 font-bold flex items-center')}\r\n                             htmlFor={label}>{label}</label>}\r\n            <RSelect\r\n                isLoading={isLoading}\r\n                isClearable={isClearable}\r\n                name={name}\r\n                clearIndicator={true}\r\n                styles={customStyles(sm)}\r\n                id={label}\r\n                value={value}\r\n                onChange={setValue}\r\n                options={options}\r\n                components={{DropdownIndicator}}\r\n                placeholder={sm ? '' : 'Не выбран'}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;","import {range} from \"lodash\";\r\nimport dayjs from \"dayjs\";\r\n\r\nexport const YEARS = range(2000, dayjs().add(1, 'year').format(\"YYYY\")).map(year => ({value: year, label: year}))\r\nexport const MONTHS = [\r\n    {\r\n        value: '01',\r\n        label: 'January'\r\n    },\r\n    {\r\n        value: '02',\r\n        label: 'February'\r\n    },\r\n    {\r\n        value: '03',\r\n        label: 'March'\r\n    },\r\n    {\r\n        value: '04',\r\n        label: 'April'\r\n    },\r\n    {\r\n        value: '05',\r\n        label: 'May'\r\n    },\r\n    {\r\n        value: '06',\r\n        label: 'June'\r\n    },\r\n    {\r\n        value: '07',\r\n        label: 'July'\r\n    },\r\n    {\r\n        value: '08',\r\n        label: 'August'\r\n    },\r\n    {\r\n        value: '09',\r\n        label: 'September'\r\n    },\r\n    {\r\n        value: '10',\r\n        label: 'October'\r\n    },\r\n    {\r\n        value: '11',\r\n        label: 'November'\r\n    },\r\n    {\r\n        value: '12',\r\n        label: 'December'\r\n    }\r\n]\r\nexport const PER_PAGES = [\r\n    {\r\n        value: 15,\r\n        label: '15'\r\n    },\r\n    {\r\n        value: 25,\r\n        label: '25'\r\n    },\r\n    {\r\n        value: 50,\r\n        label: '50'\r\n    }\r\n]\r\nexport const REGIONS = [\r\n    {\r\n        value: 1,\r\n        label: 'Andijon viloyati'\r\n    },\r\n    {\r\n        value: 2,\r\n        label: 'Buxoro viloyati'\r\n    },\r\n    {\r\n        value: 3,\r\n        label: 'Jizzax viloyati'\r\n    },\r\n    {\r\n        value: 4,\r\n        label: 'Qashqadaryo viloyati'\r\n    },\r\n    {\r\n        value: 5,\r\n        label: 'Navoiy viloyati'\r\n    },\r\n    {\r\n        value: 6,\r\n        label: 'Namangan viloyati'\r\n    },\r\n    {\r\n        value: 7,\r\n        label: 'Samarqand viloyati'\r\n    },\r\n    {\r\n        value: 8,\r\n        label: 'Surxandaryo viloyati'\r\n    },\r\n    {\r\n        value: 9,\r\n        label: 'Sirdaryo viloyati'\r\n    },\r\n    {\r\n        value: 10,\r\n        label: 'Toshkent shahri'\r\n    },\r\n    {\r\n        value: 11,\r\n        label: 'Toshkent viloyati'\r\n    },\r\n    {\r\n        value: 12,\r\n        label: 'Farg\\'ona viloyati'\r\n    },\r\n    {\r\n        value: 13,\r\n        label: 'Xorazm viloyati'\r\n    },\r\n    {\r\n        value: 14,\r\n        label: 'Qoraqalpog\\'iston Respublikasi'\r\n    },\r\n]\r\n\r\nexport const REPORT_TYPES = {\r\n    patient_general_practitioner_report: 'patient_general_practitioner_report',\r\n    statistical_form_066_report: 'statistical_form_066_report'\r\n}\r\nexport const REPORT_TYPE_STATUS = {\r\n    success: 'success',\r\n    failed: 'failed',\r\n    pending: 'pending'\r\n}","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgPrev(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 8,\n    height: 14,\n    viewBox: \"0 0 8 14\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M7.53033 0.46967C7.82322 0.762563 7.82322 1.23744 7.53033 1.53033L2.06066 7L7.53033 12.4697C7.82322 12.7626 7.82322 13.2374 7.53033 13.5303C7.23744 13.8232 6.76256 13.8232 6.46967 13.5303L0.46967 7.53033C0.176777 7.23744 0.176777 6.76256 0.46967 6.46967L6.46967 0.46967C6.76256 0.176777 7.23744 0.176777 7.53033 0.46967Z\",\n    fill: \"#222222\",\n    fillOpacity: 0.6\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPrev);\nexport default __webpack_public_path__ + \"static/media/prev.0ba7b31192ae832f345d4a127d088f8d.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgNext(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 8,\n    height: 14,\n    viewBox: \"0 0 8 14\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M0.46967 0.46967C0.176777 0.762563 0.176777 1.23744 0.46967 1.53033L5.93934 7L0.46967 12.4697C0.176777 12.7626 0.176777 13.2374 0.46967 13.5303C0.762563 13.8232 1.23744 13.8232 1.53033 13.5303L7.53033 7.53033C7.82322 7.23744 7.82322 6.76256 7.53033 6.46967L1.53033 0.46967C1.23744 0.176777 0.762563 0.176777 0.46967 0.46967Z\",\n    fill: \"#222222\",\n    fillOpacity: 0.6\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgNext);\nexport default __webpack_public_path__ + \"static/media/next.bebff1c891b224785dd8a6b5e39612fd.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst Nodata = () => {\r\n    const {t} = useTranslation()\r\n    return (\r\n        <div className={'w-100 p-5 pt-7 text-center font-semibold'}>\r\n            {t(\"Нет данных\")}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nodata;","import React, {useState} from 'react';\r\nimport {useDeleteQuery, useGetAllQuery, useGetOneQuery, usePostQuery} from \"../../hooks/api\";\r\nimport {ContentLoader, OverlayLoader} from \"../../components/loader\";\r\nimport clsx from \"clsx\";\r\nimport {get, ceil, forEach, head, omit} from \"lodash\"\r\nimport Select from \"../../components/select\";\r\nimport {PER_PAGES} from \"../../constants\";\r\nimport ReactPaginate from 'react-paginate';\r\nimport prevImg from \"../../assets/icons/prev.svg\"\r\nimport nextImg from \"../../assets/icons/next.svg\"\r\nimport Nodata from \"../../components/no-data\";\r\nimport Modal from \"../../components/modal\";\r\nimport {Edit2, Trash2} from \"react-feather\";\r\nimport usePutQuery from \"../../hooks/api/usePutQuery\";\r\nimport Swal from \"sweetalert2\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst GridView = ({\r\n                      url = '/',\r\n                      viewUrl = null,\r\n                      listKey = '',\r\n                      params = {},\r\n                      filters = null,\r\n                      columns = [],\r\n                      onRowClick = () => {\r\n                      },\r\n                      doubleRow = false,\r\n                      modalClassNames = '',\r\n                      hasActionColumn = false,\r\n                      ModalBody = null,\r\n                      openCreateModal = false,\r\n                      setOpenCreateModal = () => {\r\n                      },\r\n                      dataKey = 'data.data',\r\n                      rowKey = 'id',\r\n                      deleteModalTitle = 'Удаление организации',\r\n                      deleteModalText = 'Вы действительно хотите удалить организацию?',\r\n                      getRowId = () => {\r\n                      },\r\n                  }) => {\r\n        const navigate = useNavigate();\r\n        const [page, setPage] = useState(1);\r\n        const [rowId, setRowId] = useState(null);\r\n        const [pageSize, setPageSize] = useState({value: 15, label: '15'});\r\n        const {t} = useTranslation()\r\n        const {data, isLoading, isError, error} = useGetAllQuery({\r\n            key: listKey, url, params: {\r\n                params: {\r\n                    ...params, page,\r\n                    per_page: get(pageSize, 'value')\r\n                }\r\n            }\r\n        })\r\n        console.log('error', get(error, 'response.data'))\r\n\r\n        const {data: defaultValues = {}, isLoading: isLoadingOne} = useGetOneQuery({\r\n            id: rowId, key: [listKey, rowId], url: viewUrl ?? url, enabled: !!(rowId)\r\n        })\r\n        const {mutate: createRequest, isLoading: isLoadingPost} = usePostQuery({listKeyId: listKey})\r\n        const {mutate: updateRequest, isLoading: isLoadingPut} = usePutQuery({listKeyId: listKey})\r\n        const {mutate: deleteRequest, isLoading: deleteLoading} = useDeleteQuery({listKeyId: listKey})\r\n        const onSubmit = ({data: attrs, setError, reset}) => {\r\n            if (!openCreateModal && rowId) {\r\n                updateRequest({\r\n                    url: `${viewUrl ?? url}/${get(attrs, rowKey)}`,\r\n                    attributes: omit(attrs, rowKey)\r\n                }, {\r\n                    onSuccess: () => {\r\n                        setRowId(null);\r\n                        reset()\r\n                    },\r\n                    onError: (error) => {\r\n                        forEach(get(error, 'response.data.errors', {}), (value, field) => {\r\n                            setError(field, {type: 'validation', message: head(value)})\r\n                        })\r\n                    }\r\n                })\r\n\r\n\r\n            } else {\r\n                createRequest({\r\n                    url: url, attributes: attrs\r\n                }, {\r\n                    onSuccess: () => {\r\n                        setOpenCreateModal(false);\r\n                        reset()\r\n                    }, onError: (error) => {\r\n                        forEach(get(error, 'response.data.errors', {}), (value, field) => {\r\n                            setError(field, {type: 'validation', message: head(value)})\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        const remove = (id) => {\r\n            Swal.fire({\r\n                position: 'center',\r\n                icon: 'error',\r\n                title: deleteModalTitle,\r\n                text: deleteModalText,\r\n                showConfirmButton: true,\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#EB5757',\r\n                cancelButtonColor: '#006D85',\r\n                confirmButtonText: t('Удалить'),\r\n                cancelButtonText: t('Отмена'),\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    deleteRequest({url: `${viewUrl ?? url}/${id}`})\r\n                }\r\n            });\r\n        }\r\n\r\n        if (isError) {\r\n            navigate('/error', {\r\n                state: {data: get(error, 'response.data'), isError: isError}\r\n            });\r\n        }\r\n\r\n        if (isLoading) {\r\n            return <OverlayLoader/>\r\n        }\r\n        return (<div className={'bg-white rounded-lg'}>\r\n            {filters}\r\n            <div className=\"overflow-x-auto max-h-[75vh] overflow-y-auto border border-[#E6E6E6] rounded-lg\">\r\n\r\n                <table className=\"table\">\r\n                    <thead className={'thead'}>\r\n                    <tr className={'tr'}>\r\n                        {columns && columns.map(th => <th\r\n                            className={clsx(`th`, get(th, \"classnames\", \"\"))}\r\n                            key={get(th, 'title')}>\r\n                            {get(th, 'title')}\r\n                        </th>)}\r\n                        {hasActionColumn && <th className={'th  pr-10'}>\r\n                            {t(\"Actions\")}\r\n                        </th>}\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody className=\"tbody\">\r\n                    {get(data, dataKey, []).length > 0 ? get(data, dataKey, []).map((tr, index) => {\r\n                        return (<>\r\n                            <tr\r\n                                onClick={() => onRowClick(tr)}\r\n                                className={\"tr\"}\r\n                                key={get(tr, get(columns, '[0].key', index))}\r\n                            >\r\n                                {columns.map((th, j) => <td key={get(th, 'key', j)}\r\n                                                            className={clsx(`td`, get(th, \"classnames\", \"\"), {'!px-0': doubleRow})}>\r\n                                    {get(th, 'render') ? get(th, 'render')({\r\n                                        value: get(tr, get(th, 'key')),\r\n                                        row: tr,\r\n                                        index: index + (page - 1) * pageSize + 1\r\n                                    }) : get(tr, get(th, 'key'))}\r\n                                </td>)}\r\n                                {hasActionColumn && <td className={'td  !max-w-full pr-10 '}>\r\n                                    <Edit2 className={'mx-3.5 inline'} color={'#2F68FC'} size={22}\r\n                                           onClick={(e) => {\r\n                                               e.stopPropagation()\r\n                                               getRowId(get(tr, 'id'))\r\n                                           }}/>\r\n                                    <Trash2 className={'inline'} onClick={(e) => {\r\n                                        e.stopPropagation()\r\n                                        remove(get(tr, 'id'))\r\n                                    }} color={'#F25886'} size={22}/>\r\n                                </td>}\r\n                            </tr>\r\n                        </>);\r\n                    }) : <tr>\r\n                        <td colSpan={hasActionColumn ? columns?.length + 1 : columns?.length || 12}>\r\n                            <Nodata/>\r\n                        </td>\r\n                    </tr>}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            {get(data, 'data.meta.total') > 0 && <div className=\"flex justify-between items-center p-3\">\r\n                <div className=\"flex items-center \">\r\n                    <Select isClearable={false} sm value={pageSize} setValue={setPageSize} options={PER_PAGES}/>\r\n                    <span\r\n                        className={'ml-3 text-secondary-300 text-sm font-semibold'}>{t(\"Show\")} 1-{get(pageSize, 'value', 0)} {t(\"from\")} {get(data, 'data.meta.total', 0)}</span>\r\n                </div>\r\n                <ReactPaginate forcePage={page - 1} onPageChange={({selected}) => setPage(selected + 1)}\r\n                               pageCount={ceil(get(data, 'data.meta.total_pages', 0))}\r\n                               nextLabel={<img src={nextImg} alt=\"next\"/>}\r\n                               previousLabel={<img src={prevImg} alt=\"prev\"/>} className={'pagination'}/>\r\n            </div>}\r\n            <Modal onClose={() => {\r\n                setOpenCreateModal(false);\r\n                setRowId(null)\r\n            }}\r\n                   classNames={modalClassNames}\r\n                   title={openCreateModal ? t('Create') : t('Update')}\r\n                   open={!!(openCreateModal || rowId)}>\r\n                {isLoadingPost && <ContentLoader/>}\r\n                {isLoadingPut && <ContentLoader/>}\r\n                {deleteLoading && <ContentLoader/>}\r\n                {!openCreateModal ? (isLoadingOne ?\r\n                    <ContentLoader/> : ModalBody(onSubmit, defaultValues)) : ModalBody(onSubmit, defaultValues)}\r\n            </Modal>\r\n        </div>);\r\n    }\r\n;\r\n\r\nexport default GridView;","import React, {useState} from 'react';\r\nimport Title from \"../../../components/title\";\r\nimport GridView from \"../../../containers/grid-view\";\r\nimport {KEYS} from \"../../../constants/keys\";\r\nimport {URLS} from \"../../../constants/urls\";\r\nimport Form from \"../../../containers/form\";\r\nimport {get} from \"lodash\";\r\nimport {Input} from \"../../../containers/form/components\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Key',\r\n        key: 'key',\r\n    },\r\n    {\r\n        title: 'Uz',\r\n        key: 'uz',\r\n        classnames:'!whitespace-normal'\r\n    },\r\n    {\r\n        title: 'Ru',\r\n        key: 'ru',\r\n    },\r\n    {\r\n        title: 'En',\r\n        key: 'en',\r\n    },\r\n]\r\nconst TranslationsContainer = () => {\r\n    const {t} = useTranslation()\r\n    const [open, setOpen] = useState(false)\r\n    return (\r\n        <div>\r\n            <div className=\"grid grid-cols-12 items-center\">\r\n                <div className=\"col-span-8\">\r\n                    <Title>{t(\"Translations\")}</Title>\r\n                </div>\r\n                <div className=\"col-span-12 mt-8\">\r\n                    <GridView\r\n                        ModalBody={(onSubmit, defaultValues = {}) => <Form onSubmit={(data) => onSubmit(data)}\r\n                                                                           defaultValues={{\r\n                                                                               ...get(defaultValues, 'data', {}),\r\n                                                                           }}>\r\n\r\n                            <Input property={{disabled:true}} name={'key'}\r\n                                   placeholder={t('Key')}\r\n                                   label={t('Key')}\r\n                            />\r\n\r\n                            <Input name={'uz'}\r\n                                   placeholder={t('uz')}\r\n                                   label={t('uz')}\r\n                            />\r\n                            <Input name={'ru'}\r\n                                   placeholder={t('ru')}\r\n                                   label={t('ru')}\r\n                            />\r\n                            <Input name={'en'}\r\n                                   placeholder={t('en')}\r\n                                   label={t('en')}\r\n                            />\r\n                            <button type={'submit'}\r\n                                    className={'w-full p-3.5 rounded-lg bg-primary block w-full text-white font-bold text-center h-12 mt-6'}>\r\n                                {t('Save')}\r\n                            </button>\r\n                        </Form>}\r\n                        openCreateModal={open}\r\n                        setOpenCreateModal={setOpen}\r\n                        hasActionColumn\r\n                        listKey={KEYS.translations}\r\n                        url={URLS.translations}\r\n                        columns={columns}\r\n                        dataKey={'data.data'}\r\n                        rowKey={'key'}\r\n                        viewUrl={URLS.translationsKey}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TranslationsContainer;","import React from 'react';\r\nimport TranslationsContainer from \"../containers/TranslationsContainer\";\r\n\r\nconst TranslationsPage = () => {\r\n    return (\r\n        <>\r\n            <TranslationsContainer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TranslationsPage;"],"names":["DropdownIndicator","props","components","_jsx","_objectSpread","children","src","arrowIcon","alt","customStyles","sm","arguments","length","undefined","control","base","state","error","background","borderColor","borderRadius","outline","color","display","overflow","padding","width","height","fontSize","fontWeight","indicatorSeparator","_ref","_ref$name","name","_ref$value","value","_ref$sm","_ref$label","label","_ref$options","options","_ref$setValue","setValue","_ref$isClearable","isClearable","_ref$isLoading","isLoading","_jsxs","className","clsx","htmlFor","RSelect","clearIndicator","styles","id","onChange","placeholder","PER_PAGES","range","dayjs","add","format","map","year","REPORT_TYPE_STATUS","success","failed","pending","t","useTranslation","_ref$url","url","_ref$viewUrl","viewUrl","_ref$listKey","listKey","_ref$params","params","_ref$filters","filters","_ref$columns","columns","_ref$onRowClick","onRowClick","_ref$doubleRow","doubleRow","_ref$modalClassNames","modalClassNames","_ref$hasActionColumn","hasActionColumn","_ref$ModalBody","ModalBody","_ref$openCreateModal","openCreateModal","_ref$setOpenCreateMod","setOpenCreateModal","_ref$dataKey","dataKey","_ref$rowKey","rowKey","_ref$deleteModalTitle","deleteModalTitle","_ref$deleteModalText","deleteModalText","_ref$getRowId","getRowId","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","page","setPage","_useState3","_useState4","rowId","setRowId","_useState5","_useState6","pageSize","setPageSize","_useGetAllQuery","useGetAllQuery","key","per_page","get","data","isError","console","log","_useGetOneQuery","useGetOneQuery","enabled","_useGetOneQuery$data","defaultValues","isLoadingOne","_usePostQuery","usePostQuery","listKeyId","createRequest","mutate","isLoadingPost","_usePutQuery","usePutQuery","updateRequest","isLoadingPut","_useDeleteQuery","useDeleteQuery","deleteRequest","deleteLoading","onSubmit","_ref2","attrs","setError","reset","concat","attributes","omit","onSuccess","onError","forEach","field","type","message","head","OverlayLoader","th","tr","index","_Fragment","onClick","j","row","Edit2","size","e","stopPropagation","Trash2","Swal","position","icon","title","text","showConfirmButton","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","isConfirmed","colSpan","Nodata","Select","ReactPaginate","forcePage","onPageChange","_ref3","selected","pageCount","ceil","nextLabel","nextImg","previousLabel","prevImg","Modal","onClose","classNames","open","ContentLoader","classnames","setOpen","Title","GridView","Form","Input","property","disabled","KEYS","translations","URLS","translationsKey","TranslationsContainer"],"sourceRoot":""}